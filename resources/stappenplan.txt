0.  Shotgun surgery leggen we niet uit, omdat we zullen zien dat als we code
    smells op willen lossen, we vaak op meer plekken de code aan moeten passen.
    Het oplossen van de andere code smells lost veel van de problematiek van
    shotgun surgery al vanzelf op.
1.  Extract Method wordt toegepast om code smell 'long method' op te lossen:
    - Het aanmaken van een klant wordt verplaatst naar de constructor van Factuur.
      Want: voor een factuur moet precies 1 klant worden opgegeven.
      Dat betekent wel dat het aanmaken van de klant verplaatst wordt naar de class Main
      en dat het bepalen van een BTW-nummer en het type Klant in de class Main wordt
      ondergebracht in de methode getKlant (met de parameters buitenNederland en
      typeKlant). Uiteraard moet dan de parameter buitenNederland worden verwijderd uit
      de methode maakFactuur in de class Factuur.
    - Er kunnen met de huidige code maar een beperkt aantal factuurregels worden
      aangemaakt. Dat is geen code smell, maar het beperkt ons natuurlijk wel
      in het aantal regels dat we in een factuur toe kunnen voegen. Daar maken we
      een ArrayList van.
    - Om de volgende stap goed te kunnen doen, wordt een methode addFactuurRegel toegevoegd
      in de class Factuur. Die is nodig omdat de verplaatsing hieronder code overzet
      van de class Factuur naar de class Main en zonder addFactuurRegel kan dan
      geen FactuurRegel aan de factuur worden toegevoegd.
    - In de methode maakFactuur zijn een aantal regels opgenomen die daar alleen voor
      het testen van de class Factuur waren opgenomen. Het gaat om het toevoegen van
      5 factuurregels die in de class Main in een aparte methode voegFactuurRegelsToe
      worden opgenomen. Deze methode wordt in main in de Class Main aangeroepen.
2.  Replace Temp with Query wordt toegepast om code smell 'long method' op te lossen:
    - In regel 119 in methode toString van class FactuurRegel kan tijdelijke variabele
      totaalAantalProducten worden vervangen door een methode getTotaalAantalProducten
      die dan in regels 121 en 125 kan worden aangeroepen.
3.  Preserve Whole Object wordt toegepast om code smell 'long method' op te lossen:
    - Bij het bepalen vanwege de houdbaarheidsdatum in regel 150 van de class FactuurRegel
      wordt eerste een tijdelijke variabele vandaag aangemaakt (die pas in de genoemde
      methode wordt gebruikt en wordt van product de houdbaarheidsdatum doorgegeven.
      Aan de methode bepaalKortingVanwegeHoudbaarheidsdatum kun je beter geen parameters
      meegeven, omdat product een private property is die vanuit deze methode gebruikt
      kan worden om de houdbaarheidsdatum te bepalen.
    - Dezelfde stap moet dan natuurlijk ook worden genomen in de methode getTotaalPrijs.
4.  Replace Method with Method Object wordt toegepast om code smell 'long method' op te lossen:
    - Om de volgende stap mogelijk te maken moet een get-method voor product getProduct
      worden toegevoegd in FactuurRegel.
    - Om de volgende stap mogeljk te maken moet een get-method voor aantalProducten
      getAantalProducten worden toegevoegd in FactuurRegel.
    - Verplaats de hele procedure voor het bepalen van het kortingspercentage (vanaf regel
      120 t/m 152) naar een method object Korting. Pas de aanpak Replace Method with
      Method Object toe om dit te realiseren.
    - Ook de tijdelijke variabelen kortingVanwegeAantalProducten en
      kortingVanwegeHoudbaarheidsdatum in regels 100 en 101 kunnen naar het method object
      Korting worden verplaatst.
    - Uiteraard gaat de methode getTotaalAantalProducten (die we zojuist hebben aangemaakt)
      mee naar het method object Korting.
    - Uiteraard gaat de methode bepaalKortingVanwegeHoudbaarheidsdatum (die we zojuist hebben
      aangepast) mee naar het method object Korting.
    - Als na deze verplaatsing in de class FactuurRegel in de method toString wordt gecontroleerd
      of het kortingspercentage vanwege houdbaarheid 100% is, kan dit worden vervangen door
      de variabele kortingspercentage die is bepaald in het method object Korting.
    - Deze stap wordt nog een keer doorlopen in de method getTotaalPrijs van Class FactuurRegel.
      Bovenstaande stappen moeten daar ook worden doorlopen.
5.  Decompose Conditional wordt toegepast om code smell 'long method' op te lossen:
    - In regel 101 wordt een gecombineerde voorwaarde gebruikt die door een methode-aanroep
      vervangen kan worden. Daarvoor wordt de methode 'productIsNietGeleverd' van het type
      boolean gebruikt.
6.  Extract Class wordt toegepast om code smell 'larg class' op te lossen:
    - Voor Klant worden alle gegevens voor een adres in een aparte class FactuurAdres opgenomen.
    - Voor FactuurAdres worden de cijfers en letters voor een postcode opgenomen in Class Postcode.
    - Voor FactuurAdres worden straat, nummer en toevoeging opgenomen in Class Adres.
    - Voeg toString aan deze Classes toe die in het volgende punt gebruikt kunnen worden.
    - Voeg een method getKlantgegevensOpFactuur aan Class Klant toe om de voor een factuur relevante
      gegevens bovenaan de factuur te kunnen tonen.
7.  Remove Temporary Field
    - De property kortingsPercentage in Class FactuurRegel is een tijdelijk veld dat als property
      is toegevoegd, omdat het op twee plekken wordt gebruikt. De property wordt als lokale
      variabele opgenomen in de methodes toString en getTotaalPrijs en daar geïnitialiseerd met de
      waarde 0.0.
    - In de constructor voor FactuurRegel hoeft kortingspercentage dan niet meer te worden geïnitialiseerd.
8.  Replace Parameter with Method Call wordt toegepast om code smell 'long parameter list' te bestrijden.
    - printKlant in de Class Factuur kan zonder parameters worden aangeroepen, omdat van de methode
      getKlantgegevensOpFactuur van Class Klant gebruik gemaakt kan worden en omdat klant een property is
      die ook beschikbaar is in de methode printKlant.
9.  Remove Duplicate Code door gebruik te maken van een bestaande methode met dezelfde code.
    - toString in Class FactuurRegel heeft voor een deel dezelfde code als getTotaalPrijs in dezelfde Class.
      Hoe kunnen we die met elkaar combineren? We kunnen niet zomaar de code in toString vervangen door
      een aanroep van getTotaalPrijs, omdat het kortingsPercentage dat we in toString bepalen niet wordt
      teruggegeven als we getTotaalPrijs aanroepen. Hoe lossen we dat op?
    - We brengen het gedeelte van beide functies voor het bepalen van de korting (regels 85 t/m 103 en
      149 t/m 167) onder in de private methods getPrijsZonderKorting en getKortingspercentage en roepen
      deze methods op de plek van de verplaatste regels aan.
    - Het is schijn dat we kortingspercentage nodig hebben. In regel 12 controleren we of het kortings-
      percentage 100% is. Maar we kunnen dat natuurlijk vervangen door te controleren of de totaalprijs
      gelijk is aan 0.0 (100% korting betekent dat het product gratis is). Om zeker te weten dat afrondings-
      verschillen daarin worden meegenomen gebruiken we 'if (Math.abs(prijsMetKorting - 0.0) < 0.01)'.
    - Nu kunnen we getTotaalPrijs wel hergebruiken in toString en de code in de regels 91 t/m 112 vervangen
      door de aanroep van getTotaalPrijs.
10. Consolidate Conditional Expression wordt toegepast om code smell 'duplicate code' te bestrijden.
    - In method toString in Class FactuurRegel wordt duplicate code gebruikt om een lege string terug te geven
      (omdat de regel niet in de factuur getoond mag worden). Deze duplicate code wordt vervangen door een
      methode-aanroep waarin gecontroleerd wordt of sprake is van een lege regel (isLegeRegel). Daarvoor
      moet aan isLegeRegel wel het berekende kortingspercentage worden meegegeven.
11. Met deze stap los je twee code smells op:
    a. Replace Type Code with Subclasses wordt toegepast om code smell 'primitive obsession' te bestrijden.
    b. Replace Conditional with Polymorphism wordt toegepast om code smell 'switch-statement' te bestrijden.
    - in maakFactuur wordt een klantkorting over de gehele factuur afgeleid op basis van het type van de
      klant (CONSUMENT: 0%, OVERHEID: 2%, HORECA: 4%) (dit is Primitive Obsession).
    - De constantes CONSUMENT, OVERHEID en HORECA worden verwijderd uit de Class Klant.
    - Het bepalen van de korting kan worden uitbesteed aan subclasses van Klant voor klanten van het type
      CONSUMENT, OVERHEID en HORECA: ConsumentKlant, OverheidKlant en HorecaKlant (hierin en in de vorige
      stap volg je de aanpak van Replace Type Code with Subclasses).
    - De class Klant wordt abstract gemaakt, zodat een abstracte methode getKortingspercentage bij Klant
      gemaakt kan worden die wordt geïmplementeerd in de subclasses (hier en hieronder volg je de aanpak
      van Replace Conditional with Polymorphism).
    - De property typeKlant wordt verwijderd (en ook uit de constructor van Klant wordt de parameter
      typeKlant verwijderd).
    - Daar waar een nieuwe klant wordt aangemaakt en gebruikt, gebeurt dat nu niet meer op basis van
      de constantes, maar op basis van de nieuwe subclasses, waarvan getKortingspercentage in maakFactuur
      is verschoven naar de aanroep van getKortingsPercentage van de subclasses.
12. Replace Conditional with Polymorphism wordt toegepast om code smell 'switch-statement' te bestrijden
    (deze keer zonder de aanpak 'Replace Code Type by Subclasses').
    - In Class FactuurRegel zit een heel lelijke methode setAantal, waaraan een aantal combinaties mee-
      gegeven kunnen worden:
      - Alleen aantal producten.
      - Een combinatie van aantalProducten (bijv. dozen) en aantalProductenPerVerpakking (bijv. 6 flessen/doos).
      - Een combinatie van gewicht en eenheid (bijv. 2.88 kg).
    - Hiermee wordt direct ook aangetoond dat een code smell de code smell 'Shotgun Surgery' kan
      veroorzaken. Er blijkt op heel veel plekken een afhankelijkheid te bestaan van deze lelijke
      constructie en het kost dus veel moeite om deze code smell (met setAantal) te verwijderen.
    - Eigenlijk worden hier drie soorten producten aangemaakt:
      - Een product dat per stuk wordt verkocht (ProductPerStuk).
      - Een product dat per verpakking wordt verkocht (ProductPerColli).
      - Een product dat per gewicht wordt verkocht (ProductPerGewicht).
    - Deze 3 classes worden een subclass van Product.
    - In Class Product worden de properties aantalProductenInVerpakking, gewicht en eenheid verwijderd (getters
      en setters worden verplaatst naar de juiste subclasses).
    - De classes hebben ieder een eigen constructor:
      - De property prijsPerStukOfKilo wordt hernoemd naar eenheidsprijs en als parameter in de constructor voor
        Product ook gewijzigd qua naam.
      - Class Product wordt een abstract class met een abstract method getTotaalprijs.
      - De methode getTotaalPrijs wordt in de subclasses geïmplementeerd.
      - Constructoren van subclasses hebben minimaal een naam, een eenheidsprijs en een houdbaarheidsdatum
        (die aan de super-constructor wordt meegegeven).
      - ProductPerStuk heeft geen specifieke uitbreiding van de constructor.
      - ProductPerColli heeft een constructor met extra een parameter aantalProductenPerVerpakking
        (en natuurlijk de property aantalProductenPerVerpakking).
      - ProductPerGewicht heeft een constructor met 2 extra parameters voor gewicht en eenheid
        (en natuurlijk deze properties).
    - Met deze stappen hebben we de verwijdering van setAantal in FactuurRegel voorbereid. Die kan
      worden verwijderd, want eigenlijk wil je voor elk product bij het aanroepen van de constructor
      al weten hoeveel producten er worden opgegeven:
      - Voor het toevoegen van een ProductPerStuk en een ProductPerColli wordt een constructor met
        de parameters aantal en product van type Product toegevoegd.
      - Voor het toevoegen van een ProductPerGewicht wordt een constructor met de parameter
        product van het type ProductPerGewicht toegevoegd (daarvoor is het aantal namelijk altijd 0).
    - De methode getPrijsZonderKorting in Class FactuurRegel is bijna overbodig geworden, omdat die nu
      gelijk is aan het aanroepen van de abstract method getPrijsZonderKorting die in de subclasses
      is geïmplementeerd. We laten hem toch intact (om niet teveel wijzigingen te hoeven doorvoeren en
      we roepen in de method getPrijsZonderKorting de method getTotaalPrijs van het product aan.
    - In de method productIsNietGeleverd is de tweede voorwaarde (vergelijking van gewicht) hetzelfde
      als de eerste (in de constructor voor het toevoegen van ProductPerGewicht wordt de waarde van
      aantalProducten gelijk gemaakt aan 0). Deze voorwaarde wordt daarmee vereenvoudigd.
    - In de oude situatie werd in toString voor FactuurRegel gebruik gemaakt van waardes voor aantal
      producten per verpakking en gewicht. Om te voorkomen dat we dit nog steeds op dezelfde manier op
      moeten lossen kunnen we ook voor deze if-then-else gebruik maken van polymorfisme door
      deze regels te verplaatsen naar een abstract method getFormattedFactuurRegelString ()
      die in de subclasses wordt geïmplementeerd. Aan deze methode moeten wel de parameters
      aantalProducten, kortingspercentage en prijsMetKorting worden meegegeven.
    - Gebruik de drie bestaande strings als basis om de factuurregels voor de verschillende producten
      in te vullen (meestal volstaat het om product te verwijderen - want je zit in product en dus wordt
      standaard uitgegaan van this - en/of om de getter te vervangen door de naam van de property -
      want ook hiervoor geldt dat de property in het product vanuit this bekend is.
    - Om de korting op basis van aantallen producten te kunnen bepalen, moet een abstract method
      getAantalProductenPerVerpakking aan Product worden toegevoegd, die voor de verschillende producten
      de volgende waarde teruggeeft:
      - Bij ProductPerStuk wordt 1 teruggegeven.
      - Bij ProductPerColli wordt de property teruggegeven (het is de getter voor die property).
      - Bij ProductPerGewicht wordt 1 teruggeven.
    - In Main moet nu de methode voegFactuurRegelsToe nog worden aangepast.
    - En uiteraard moeten eventuele gebruikte junit-testcases ook worden aangepast.
